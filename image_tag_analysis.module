<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_node_presave().
 */
function image_tag_analysis_node_presave(NodeInterface $node) {
  if ($node->bundle() === 'article') {
    _image_tag_analysis_process_node($node, FALSE); // Match only
  }
}

/**
 * Implements hook_page_attachments().
 */
function image_tag_analysis_page_attachments(array &$attachments) {
  $route_match = \Drupal::routeMatch();
  $node = $route_match->getParameter('node');

  \Drupal::logger('image_tag_analysis')->notice('📡 Checking page attachments...');

  if (
    $route_match->getRouteName() === 'entity.node.canonical' &&
    $node instanceof NodeInterface &&
    $node->bundle() === 'product_catalog'
  ) {
    $already_tagged = !$node->get('field_product_tags')->isEmpty();

    $attachments['#attached']['library'][] = 'image_tag_analysis/image_tag_trigger';
    $attachments['#attached']['drupalSettings']['nid'] = $node->id();
    $attachments['#attached']['drupalSettings']['imageTagAnalysisAlreadyTagged'] = $already_tagged;

    \Drupal::logger('image_tag_analysis')->notice('📡 JS triggered for node nid: @nid', ['@nid' => $node->id()]);
  }
}

/**
 * Alter node form to add Re-analyze button.
 */
function image_tag_analysis_form_node_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();

  if ($node->bundle() === 'product_catalog') {
    $form['reanalyze'] = [
      '#type' => 'submit',
      '#value' => t('Re-analyze Image'),
      '#submit' => ['image_tag_analysis_reanalyze_submit'],
      '#weight' => 99,
    ];
  }
  elseif ($node->bundle() === 'article') {
    $form['reanalyze'] = [
      '#type' => 'submit',
      '#value' => t('Re-analyze Image'),
      '#submit' => ['image_tag_analysis_reanalyze_submit_article'],
      '#weight' => 99,
    ];
  }
}

function image_tag_analysis_reanalyze_submit(array &$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  _image_tag_analysis_process_node($node, TRUE); // create tag
  $node->save();
  \Drupal::messenger()->addStatus(t('Image has been re-analyzed.'));
}

function image_tag_analysis_reanalyze_submit_article(array &$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  _image_tag_analysis_process_node($node, FALSE); // match only
  $node->save();
  \Drupal::messenger()->addStatus(t('Article image has been re-analyzed.'));
}

/**
 * Implements hook_theme().
 */
function image_tag_analysis_theme($existing, $type, $theme, $path) {
  return [
    'matched_products_slider' => [
      'variables' => ['items' => NULL],
      'template' => 'matched-products-slider'
    ]
  ];
}

function _image_tag_analysis_process_node(NodeInterface $node, $create_missing = TRUE) {
  \Drupal::logger('image_tag_analysis')->notice('🔍 Tagging START for @type nid:@nid (create_missing: @mode)', [
    '@type' => $node->bundle(),
    '@nid' => $node->id(),
    '@mode' => $create_missing ? 'TRUE' : 'FALSE'
  ]);

  $field_name = $node->bundle() === 'article' ? 'field_image' : 'field_product_image';
  $target_field = $node->bundle() === 'article' ? 'field_image_product_tags' : 'field_product_tags';

  if (!$node->hasField($field_name) || $node->get($field_name)->isEmpty()) {
    return;
  }

  $file = $node->get($field_name)->entity;
  $uri = $file->getFileUri();
  $file_system = \Drupal::service('file_system');
  $image_contents = NULL;

  if (str_starts_with($uri, 's3://')) {
    $cdn_domain = \Drupal::config('image_tag_analysis.settings')->get('cdn_domain');
    if (empty($cdn_domain) && \Drupal::hasService('settings')) {
      $cdn_domain = \Drupal::service('settings')->get('image_tag_analysis.cdn_domain');
    }
    $path = substr($uri, strlen('s3://'));
    $root_folder = \Drupal::config('s3fs.settings')->get('root_folder');
    if (!empty($root_folder)) {
      $path = $root_folder . '/' . $path;
    }
    $image_url = rtrim($cdn_domain, '/') . '/' . ltrim($path, '/');
    $image_contents = @file_get_contents($image_url);
  } else {
    $real_path = $file_system->realpath($uri);
    if (!empty($real_path)) {
      $image_contents = @file_get_contents($real_path);
    }
  }

  if (empty($image_contents)) {
    return;
  }

  $image_data = base64_encode($image_contents);
  $prompt = \Drupal::config('image_tag_analysis.settings')->get('ai_prompt');
  $response = _image_tag_analysis_call_ai($image_data, $prompt);

  \Drupal::logger('image_tag_analysis')->notice('🧪 AI raw response: @res', ['@res' => $response]);

  if (!empty($response)) {
    if (preg_match('/^```json\s*(.*?)```$/s', $response, $matches)) {
      $response = trim($matches[1]);
    }

    $data = json_decode($response, TRUE);
    if (!empty($data['description']) && $node->hasField('field_img_tag_analysis_desc')) {
      $node->set('field_img_tag_analysis_desc', $data['description']);
    }
    if (!empty($data['items']) && $node->hasField($target_field)) {
      $term_ids = _image_tag_analysis_match_product_tags($data['items'], $create_missing);
      $node->set($target_field, $term_ids);
    }
  }
}

function _image_tag_analysis_call_ai($input_data, $prompt, $is_text_only = FALSE) {
  try {
    $key_service = \Drupal::service('key.repository');
    $api_key = $key_service->getKey('openai_key')->getKeyValue();
    $client = \Drupal::httpClient();

    $message_content = $is_text_only
      ? [['type' => 'text', 'text' => $prompt . "\n\n" . base64_decode($input_data)]]
      : [
        ['type' => 'text', 'text' => $prompt],
        ['type' => 'image_url', 'image_url' => ['url' => 'data:image/jpeg;base64,' . $input_data]],
      ];

    $res = $client->post('https://api.openai.com/v1/chat/completions', [
      'headers' => [
        'Authorization' => "Bearer $api_key",
        'Content-Type' => 'application/json',
      ],
      'json' => [
        'model' => 'gpt-4o',
        'messages' => [['role' => 'user', 'content' => $message_content]],
        'max_tokens' => 2048,
      ],
    ]);

    $body = json_decode($res->getBody()->getContents(), TRUE);
    return $body['choices'][0]['message']['content'] ?? '';
  } catch (Exception $e) {
    \Drupal::logger('image_tag_analysis')->error('AI API error: @msg', ['@msg' => $e->getMessage()]);
    return NULL;
  }
}

function _image_tag_analysis_match_product_tags(array $items, $create_missing = TRUE) {
  $term_ids = [];
  $names = [];

  foreach ($items as $item) {
    if (!empty($item['Product Name']) && stripos($item['Product Name'], 'Sponsor') === false) {
      $names[] = trim($item['Product Name']);
    }
    if (!empty($item['Brand'])) $names[] = trim($item['Brand']);
    if (!empty($item['Category']) && stripos($item['Category'], 'Sponsor') === false) {
      $names[] = trim($item['Category']);
    }
  }

  $names = array_filter(array_unique($names));

  foreach ($names as $name) {
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
      'vid' => 'product_tags',
      'name' => $name,
    ]);
    $term = reset($terms);

    if (!$term && $create_missing) {
      $term = Term::create(['vid' => 'product_tags', 'name' => $name]);
      $term->save();
    }

    if ($term) {
      $term_ids[] = ['target_id' => $term->id()];
    }
  }

  return $term_ids;
}
