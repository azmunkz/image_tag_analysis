<?php

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_node_presave().
 */
function image_tag_analysis_node_presave(NodeInterface $node) {
  \Drupal::logger('image_tag_analysis')->notice('🔥 PRESAVE triggered for @bundle nid:@nid', [
    '@bundle' => $node->bundle(),
    '@nid' => $node->id(),
  ]);

  // Run tagging only on newly created nodes.
  if ($node->isNew()) {
    if ($node->bundle() === 'article') {
      _image_tag_analysis_process_node($node, FALSE);
    }
    elseif ($node->bundle() === 'product_catalog') {
      _image_tag_analysis_process_node($node, TRUE);
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function image_tag_analysis_page_attachments(array &$attachments) {
  $route_match = \Drupal::routeMatch();
  $node = $route_match->getParameter('node');

  if ($route_match->getRouteName() === 'entity.node.canonical' && $node instanceof \Drupal\node\NodeInterface) {
    if ($node->bundle() === 'article') {
      // ✅ Use service instead of static config
      $config = \Drupal::service('config.factory')->get('image_tag_analysis.slider');

      $attachments['#attached']['library'][] = 'image_tag_analysis/slider';
      $attachments['#attached']['drupalSettings']['image_tag_analysis']['slider'] = [
        'itemsPerView' => (int) $config->get('items_per_view'),
        'effect' => $config->get('slider_effect'),
        'breakpoints' => [
          320 => ['slidesPerView' => (int) $config->get('slides_mobile')],
          768 => ['slidesPerView' => (int) $config->get('slides_tablet')],
          1024 => ['slidesPerView' => (int) $config->get('slides_desktop')],
        ],
      ];
    }
  }
}

function image_tag_analysis_form_node_form_alter(array &$form, FormStateInterface $form_state, $form_id)
{
  $node = $form_state->getFormObject()->getEntity();

  if ($node->bundle() === 'product_catalog') {
    $form['reanalyze'] = [
      '#type' => 'submit',
      '#value' => t('Re-analyze Image'),
      '#submit' => ['image_tag_analysis_reanalyze_submit'],
      '#attributes' => [
        'onclick' => "return confirm('Are you sure you want to re-analyze the image? This will overwrite the existing tags and description.');",
      ],
      '#weight' => 99,
    ];
  } elseif ($node->bundle() === 'article') {
    $form['reanalyze'] = [
      '#type' => 'submit',
      '#value' => t('Re-analyze Image'),
      '#submit' => ['image_tag_analysis_reanalyze_submit_article'],
      '#attributes' => [
        'onclick' => "return confirm('Are you sure you want to re-analyze the image? This will overwrite the existing tags and description.');",
      ],
      '#weight' => 99,
    ];

    // Always show the fieldset even if no tags matched
    $form['ai_generated_tags'] = [
      '#type' => 'fieldset',
      '#title' => t('AI Generated Tags'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => 98,
    ];

    // Primary source: matched product tags (if available)
    $tags = [];
    // ✅ Always prefer AI tag list
    $ai_tags = \Drupal::state()->get('image_tag_analysis.last_tags', []);
    foreach ($ai_tags as $tag) {
      $tags[] = Html::escape($tag);
    }

    // If no matched tags, fallback to raw AI tag list stored in tempstore (or logging)
    if (empty($tags) && \Drupal::state()->get('image_tag_analysis.last_tags')) {
      $ai_tags = \Drupal::state()->get('image_tag_analysis.last_tags', []);
      foreach ($ai_tags as $tag) {
        $tags[] = Html::escape($tag);
      }
    }

    // Show message if still empty
    if (empty($tags)) {
      $form['ai_generated_tags']['tag_list'] = [
        '#markup' => '<div><em>No tags were matched or generated.</em></div>',
      ];
    } else {
      $form['ai_generated_tags']['tag_list'] = [
        '#markup' => '<div>' . implode(', ', $tags) . '</div>',
      ];
    }
  }
}


function image_tag_analysis_reanalyze_submit(array &$form, FormStateInterface $form_state)
{
  $node = $form_state->getFormObject()->getEntity();
  _image_tag_analysis_process_node($node, TRUE); // create tag
  $node->save();
  \Drupal::messenger()->addStatus(t('Image has been re-analyzed.'));
}

function image_tag_analysis_reanalyze_submit_article(array &$form, FormStateInterface $form_state)
{
  $node = $form_state->getFormObject()->getEntity();
  _image_tag_analysis_process_node($node, FALSE); // match only
  $node->save();
  \Drupal::messenger()->addStatus(t('Article image has been re-analyzed.'));
}

/**
 * Implements hook_theme().
 */
function image_tag_analysis_theme($existing, $type, $theme, $path)
{
  return [
    'matched_products_slider' => [
      'variables' => ['items' => NULL],
      'template' => 'matched-products-slider'
    ]
  ];
}

function _image_tag_analysis_process_node(NodeInterface $node, $create_missing = TRUE)
{
  \Drupal::logger('image_tag_analysis')->notice('🔍 Tagging START for @type uuid:@uuid (create_missing: @mode)', [
    '@type' => $node->bundle(),
    '@uuid' => $node->uuid(),
    '@mode' => $create_missing ? 'TRUE' : 'FALSE'
  ]);

  $service = \Drupal::service('image_tag_analysis.openai_assistant');
  $config = \Drupal::config('image_tag_analysis.settings');

  if ($node->bundle() === 'article') {
    $service->setAssistantId($config->get('article_assistant_id'));
  } else {
    $service->setAssistantId($config->get('assistant_id'));
  }

  $field_name = $node->bundle() === 'article' ? 'field_image' : 'field_product_image';
  $target_field = $node->bundle() === 'article' ? 'field_image_product_tags' : 'field_product_tags';
  $desc_field = $node->bundle() === 'article'
    ? 'field_image_tag_analysis_desc'
    : 'field_img_tag_analysis_desc';


  if (!$node->hasField($field_name) || $node->get($field_name)->isEmpty()) {
    return;
  }

  $file = $node->get($field_name)->entity;
  $uri = $file->getFileUri();
  $file_system = \Drupal::service('file_system');
  $image_contents = NULL;

  if (str_starts_with($uri, 's3://')) {
    $cdn_domain = \Drupal::config('image_tag_analysis.settings')->get('cdn_domain');
    if (empty($cdn_domain) && \Drupal::hasService('settings')) {
      $cdn_domain = \Drupal::service('settings')->get('image_tag_analysis.cdn_domain');
    }
    $path = substr($uri, strlen('s3://'));
    $root_folder = \Drupal::config('s3fs.settings')->get('root_folder');
    if (!empty($root_folder)) {
      $path = $root_folder . '/' . $path;
    }
    $image_url = rtrim($cdn_domain, '/') . '/' . ltrim($path, '/');
    //$image_contents = @file_get_contents($image_url);
  } else {
    $real_path = $file_system->realpath($uri);
    if (!empty($real_path)) {
      $image_contents = @file_get_contents($real_path);
    }
  }

  if (empty($image_url)) {
    \Drupal::logger('image_tag_analysis')->warning('⚠ No image URL found for tagging.');
    return;
  }


//  $image_data = base64_encode($image_contents);
  $image_data = $image_contents;
  $prompt_config = \Drupal::service('config.factory')->get('image_tag_analysis.settings');
  $prompt = $node->bundle() === 'article'
    ? $prompt_config->get('article_prompt')
    : $prompt_config->get('ai_prompt');

//  $response = _image_tag_analysis_call_ai($image_data, $prompt);
  // 🔄 Call Assistants API instead of Chat Completion
  $response = _image_tag_analysis_call_assistant_api($image_url);
//  $data = _image_tag_analysis_call_assistant_api($image_url);
  \Drupal::logger('image_tag_analysis')->notice('🎯 Assistant response: <pre>@res</pre>', ['@res' => print_r($response, TRUE)]);


  \Drupal::logger('image_tag_analysis')->notice('🧪 AI raw response: @res', ['@res' => $response]);

  if (!empty($response)) {
    $data = is_array($response) ? $response : json_decode($response, TRUE);

    if (!empty($data['tags'])) {
      $config = \Drupal::config('image_tag_analysis.settings');
      $max_tags = (int) $config->get('max_tags') ?: 5;
      $tags = array_slice($data['tags'], 0, $max_tags);

      \Drupal::state()->set('image_tag_analysis.last_tags', $tags);
    }

    if (!empty($data['description']) && $node->hasField($desc_field)) {
      $node->set($desc_field, $data['description']);
    }
    if (!empty($data['tags']) && $node->hasField($target_field)) {
      $term_ids = _image_tag_analysis_match_tags_list($data['tags'], $create_missing);
      $node->set($target_field, $term_ids);
    }
  }
}

function _image_tag_analysis_call_ai($input_data, $prompt, $is_text_only = FALSE)
{
  try {
    $key_service = \Drupal::service('key.repository');
    $api_key = $key_service->getKey('openai_key')->getKeyValue();
    $client = \Drupal::httpClient();

    $message_content = $is_text_only
      ? [['type' => 'text', 'text' => $prompt . "\n\n" . base64_decode($input_data)]]
      : [
        ['type' => 'text', 'text' => $prompt],
        ['type' => 'image_url', 'image_url' => ['url' => 'data:image/jpeg;base64,' . $input_data]],
      ];

    $res = $client->post('https://api.openai.com/v1/chat/completions', [
      'headers' => [
        'Authorization' => "Bearer $api_key",
        'Content-Type' => 'application/json',
      ],
      'json' => [
        'model' => 'gpt-4o',
        'temperature' => 0.2,
        'top_p' => 1.0,
        'max_tokens' => 4096,
        'messages' => [['role' => 'user', 'content' => $message_content]],
      ],
    ]);

    $body = json_decode($res->getBody()->getContents(), TRUE);
    return $body['choices'][0]['message']['content'] ?? '';
  } catch (Exception $e) {
    \Drupal::logger('image_tag_analysis')->error('AI API error: @msg', ['@msg' => $e->getMessage()]);
    return NULL;
  }
}

function _image_tag_analysis_match_product_tags(array $items, $create_missing = TRUE)
{
  $term_ids = [];
  $names = [];

  foreach ($items as $item) {
    if (!empty($item['tag']) && stripos($item['tag'], 'Sponsor') === false) {
      $names[] = trim($item['tag']);
    }
  }

  $names = array_filter(array_unique($names));

  foreach ($names as $name) {
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
      'vid' => 'product_tags',
      'name' => $name,
    ]);
    $term = reset($terms);

    if (!$term && $create_missing) {
      $term = Term::create(['vid' => 'product_tags', 'name' => $name]);
      $term->save();
    }

    if ($term) {
      $term_ids[] = ['target_id' => $term->id()];
    }
  }

  return $term_ids;
}

function _image_tag_analysis_call_assistant_api(string $image_url): ?array
{
  try {
    $service = \Drupal::service('image_tag_analysis.openai_assistant');

    $thread_id = $service->createThread();
    $service->addMessage($thread_id, $image_url);
    $run_id = $service->runAssistant($thread_id);
    $result = $service->pollUntilComplete($thread_id, $run_id);

    return $result;
  } catch (\Exception $e) {
    \Drupal::logger('image_tag_analysis')->error('Assistant API error: @msg', ['@msg' => $e->getMessage()]);
    return NULL;
  }
}

function _image_tag_analysis_match_tags_list(array $tags, $create_missing = TRUE) {
  $term_ids = [];

  foreach ($tags as $name) {
    $name = trim($name);

    // Skip empty tags or those that contain the word "Sponsor".
    if ($name === '' || stripos($name, 'Sponsor') !== FALSE) {
      continue;
    }

    // Try to load existing term by name within 'product_tags' vocabulary.
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'vid' => 'product_tags',
        'name' => $name,
      ]);

    $term = reset($terms);

    // Create term if not exists and allowed.
    if (!$term && $create_missing) {
      $term = Term::create([
        'vid' => 'product_tags',
        'name' => $name,
      ]);
      $term->save();
    }

    // If valid term found or created, add to list.
    if ($term) {
      $term_ids[] = ['target_id' => $term->id()];
    }
  }

  \Drupal::logger('image_tag_analysis')->notice('🎯 Tags being processed: <pre>@json</pre>', [
    '@json' => print_r($tags, TRUE),
  ]);

  return $term_ids;
}
